// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dcs3spp.courseManagementContainers.Services.Courses.Infrastructure;

namespace Courses.API.Infrastructure.Migrations
{
    [DbContext(typeof(CourseContext))]
    partial class CourseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("dcs3spp.courseManagementContainers.Services.Courses.Domain.AggregatesModel.CourseAggregate.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CourseID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("CourseName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("course","coursemanagement");
                });

            modelBuilder.Entity("dcs3spp.courseManagementContainers.Services.Courses.Domain.AggregatesModel.CourseAggregate.CourseUnit", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnName("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitID")
                        .HasColumnType("integer");

                    b.HasKey("CourseId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("courseunit","coursemanagement");
                });

            modelBuilder.Entity("dcs3spp.courseManagementContainers.Services.Courses.Domain.AggregatesModel.CourseAggregate.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("Code")
                        .HasColumnName("UnitCode")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("UnitName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("unit","coursemanagement");
                });

            modelBuilder.Entity("dcs3spp.courseManagementContainers.Services.Courses.Domain.AggregatesModel.CourseAggregate.CourseUnit", b =>
                {
                    b.HasOne("dcs3spp.courseManagementContainers.Services.Courses.Domain.AggregatesModel.CourseAggregate.Course", null)
                        .WithMany("CourseUnits")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dcs3spp.courseManagementContainers.Services.Courses.Domain.AggregatesModel.CourseAggregate.Unit", "Unit")
                        .WithMany("CourseUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
